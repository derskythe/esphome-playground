---
sensor:
  - platform: wifi_signal
    name: '${friendly_name} WiFi Signal Sensor'
    update_interval: 60s
    id: wifi_sensor

  - platform: debug
    free:
      name: '${friendly_name} Heap Free'
      accuracy_decimals: 2
    cpu_frequency:
      name: '${friendly_name} CPU Freq.'
      unit_of_measurement: 'MHz'
      accuracy_decimals: 2
      filters:
        - multiply: 0.000001
    loop_time:
      name: '${friendly_name} Loop Time'
      accuracy_decimals: 0
  #    psram:
  #      name: '${friendly_name} Free PSRAM'

  # - platform: uptime
  #   id: uptime_sensor
  #   name: Uptime Sensor

  # - platform: adc
  #   pin: VCC
  #   id: "VCC"
  #   internal: true

  - platform: uptime
    id: uptime_sensor
    name: '${friendly_name} Uptime'
    update_interval: 120s
    internal: true
    on_raw_value:
      then:
        - logger.log:
            format: 'Raw Value of Uptime sensor: %f, %f'
            args: [ 'id(uptime_sensor).raw_state', 'id(uptime_sensor).state' ]
            level: INFO
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();

  # - platform: template
  #   name: "${friendly_name} Battery Level"
  #   unit_of_measurement: "%"
  #   lambda: |-
  #     return ((id(VCC).state /3.30) * 100.00);
