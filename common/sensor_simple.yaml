---
sensor:
  - platform: wifi_signal
    name: '${friendly_name} Wi-Fi Signal'
    update_interval: 120s
    unit_of_measurement: dB
    id: wifi_sensor
    entity_category: "diagnostic"
    icon: fas:wifi

  # Reports the Wi-Fi signal strength in %
  - platform: copy
    source_id: wifi_sensor
    name: "${friendly_name} Wi-Fi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: ""
    icon: fas:wifi

  - platform: debug
    free:
      name: '${friendly_name} Heap Free'
      accuracy_decimals: 0
    cpu_frequency:
      name: '${friendly_name} CPU Freq.'
      unit_of_measurement: 'MHz'
      accuracy_decimals: 0
      filters:
        - multiply: 0.000001
    loop_time:
      name: '${friendly_name} Loop Time'
      accuracy_decimals: 0

  - platform: uptime
    id: uptime_sensor
    name: '${friendly_name} Uptime'
    update_interval: 120s
    internal: true
    on_raw_value:
      then:
        - logger.log:
            format: 'Raw Value of Uptime sensor: %f, %f'
            args: [ 'id(uptime_sensor).raw_state', 'id(uptime_sensor).state' ]
            level: INFO
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();
