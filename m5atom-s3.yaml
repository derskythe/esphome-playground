---
substitutions:
  friendly_name: Atom S3
  entity_id: 'm5atom-s3'
  wifi_power_save_mode: LIGHT
  enable_ota: 'true'
  enable_wifi_led_status: 'false'
  display_backlight: 'display_backlight'
  pin_sda: GPIO38
  pin_scl: GPIO39
  pin_mosi: GPIO21
  pin_sck: GPIO17
  pin_cs: GPIO15
  pin_rs: GPIO33
  pin_rst: GPIO34
  pin_lcd_bl: GPIO16
  pin_port_custom1: GPIO2
  pin_port_custom2: GPIO1
  pin_button_a: GPIO41
  pin_ir: GPIO4

################################################################################
## EspHome Settings
################################################################################

esphome:
  name: '${entity_id}'
  on_boot:
    priority: 800
    then:
      - logger.log:
          format: '${friendly_name} started'
          level: INFO
      - light.turn_on:
          id: '${display_backlight}'
          brightness: 0.5
          transition_length: 1s
      - logger.log:
          format: '${friendly_name} display turn on!'
          level: INFO
      - component.update: main_display

################################################################################
## ESP32 settings
################################################################################

esp32:
  board: 'esp32-s3-devkitc-1'
  variant: 'esp32s3'
  framework:
    type: arduino

################################################################################
## Global variables
################################################################################

globals:
  - id: enable_wifi_led_status
    type: bool
    restore_value: 'false'
    initial_value: 'false'
  - id: is_api_connected
    type: bool
    restore_value: 'false'
    initial_value: 'false'
  - id: is_mqtt_connected
    type: bool
    restore_value: 'false'
    initial_value: 'false'
  - id: is_wifi_connected
    type: bool
    restore_value: 'false'
    initial_value: 'false'

################################################################################
## Add packages
################################################################################

packages:
  pkg_api: !include common/api.yaml
  pkg_ota: !include common/ota.yaml
  pkg_common: !include common/standard_mesh.yaml
  pkg_wifi: !include common/wifi_simple.yaml
  pkg_mqtt: !include common/mqtt.yaml
  pkg_sensor: !include common/sensor.yaml
  pkg_binary_sensor: !include common/binary_sensor.yaml
  pkg_text_sensor: !include common/text_sensor.yaml
  pkg_switch: !include common/switch.yaml
  pkg_select: !include common/select.yaml
  pkg_display_off: !include common/display_off.yaml
  # Display
  pkg_font: !include common/font.yaml
  pkg_font_images: !include common/font_images_small.yaml
  # IMU
  pkg_imu: !include common/mpu6886.yaml
  # Temperature and humidity sensor
  pkg_temp: !include common/sht40.yaml
  # Pressure sensor
  pkg_temp_exact: !include common/bmp280.yaml

################################################################################
## I2C
################################################################################

i2c:
  - id: bus_a
    sda: ${pin_sda}
    scl: ${pin_scl}
    scan: true

################################################################################
## GPIO pin of the display backlight
################################################################################

output:
  - platform: ledc
    pin: ${pin_lcd_bl}
    id: '${display_backlight}_pwm'

light:
  - platform: monochromatic
    output: '${display_backlight}_pwm'
    id: ${display_backlight}
    name: '${friendly_name} Display'
    icon: fas:display
    restore_mode: ALWAYS_ON

################################################################################
## Script
################################################################################

script:
  - id: screen_activated
    mode: single
    then:
      - if:
          condition:
            binary_sensor.is_on: button_a
          then:
            - logger.log:
                format: 'Turn on by button'
                level: INFO
            - light.turn_on: ${display_backlight}

################################################################################
## SPI Display
################################################################################

spi:
  clk_pin: ${pin_sck}
  mosi_pin: ${pin_mosi}

display:
  - platform: ili9xxx
    id: main_display
    model: ST7789V
    cs_pin: ${pin_cs}
    dc_pin: ${pin_rs}
    reset_pin: ${pin_rst}
    invert_colors: true
    update_interval: 1s
    dimensions:
      height: 128
      width: 128
      offset_height: 1
      offset_width: 2
    lambda: |-
      const int line_space = 6;
      const int line_height = 30;
      const int first_line = 0;
      const int second_line = first_line + line_space + line_height;
      const int third_line = second_line + line_space + line_height;
      int element_line = 0;

      it.image(104, first_line, id(system_status).state
         ? id(icon_power)
         : id(icon_power_plug_off));

      // Picture: icon_temp
      it.image(12, second_line, id(icon_temp));
      it.printf(34, second_line, id(roboto_middle), "%.1f C", id(temperature_sensor).state);

      // Picture: water-percent
      it.image(22, third_line, id(icon_water_percent));
      it.printf(50, third_line, id(roboto_middle), "%.1f %", id(humidity_sensor).state);



#      it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_blue));
#      // Header bar
#      it.rectangle(0, 30, it.get_width(), it.get_height(), id(my_blue));
#
#      int first  = (int)(128 / 2) - 10;
#      int second = (int)(128 / 3) - 10;
#      //auto current_time = id(sntp_time).now();
#      auto current_time = id(esptime).now();
#      it.strftime(first, second * 1 + 5, id(roboto), id(my_gray), TextAlign::CENTER, "%Y-%m-%d",
#            current_time);
#      it.strftime(first, second * 2 + 5, id(roboto_big), id(my_gray), TextAlign::CENTER, "%H:%M:%S",
#            current_time);
#      it.print(5, 10, id(roboto), id(my_yellow), TextAlign::TOP_LEFT, "ESPHome");
#
#      // Comment out the above lines to see the image without text overload
#      // it.image(0, 0, id(my_image));
#      //it.print(115, 5, id(roboto_small), id(my_green), TextAlign::TOP_RIGHT,
#      //   id(system_status).state
#      //   ? "Online"
#      //   : "Offline");
#      it.image(110, 10, id(system_status).state
#         ? id(icon_power)
#         : id(icon_power_plug_off));
#      //it.print(115, 5, id(roboto_small), id(my_green), TextAlign::TOP_RIGHT,
#      //   id(system_status).state
#      //   ? id(icon_power)
#      //   : id(icon_power_plug_off));

################################################################################
## Button
################################################################################

binary_sensor:
  - platform: gpio
    id: button_a
    name: 'Button A'
    icon: mdi:keyboard-f1
    pin:
      number: ${pin_button_a}
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      - delayed_off: 10ms
    on_press:
      then:
        - logger.log:
            format: 'Button A was pressed'
            level: INFO
        - if:
            condition:
              script.is_running: screen_activated
            then:
              - logger.log:
                  format: 'Script is already running'
                  level: INFO
            else:
              - script.execute: screen_activated
        - binary_sensor.template.publish:
            id: dim_display_on
            state: true
        - binary_sensor.template.publish:
            id: dim_display_off
            state: true
    on_release:
      then:
        - binary_sensor.template.publish:
            id: dim_display_on
            state: false
        - binary_sensor.template.publish:
            id: dim_display_off
            state: false

################################################################################
## IR Must be here!
################################################################################
