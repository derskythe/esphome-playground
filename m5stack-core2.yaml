substitutions:
  friendly_name: "M5Stack"
  entity_id: "m5stack-core2"
  wifi_power_save_mode: "none"
  enable_ota: "true"
  enable_wifi_led_status: "true"
  display_backlight: "display_backlight"

esphome:
  name: "${entity_id}"
  friendly_name: "${friendly_name}"
  on_boot:
    priority: 800
    then:
    - logger.log:
        format: "Booting ESP32"
        level: INFO
    - light.turn_on:
        id: ${display_backlight}
        brightness: 1
        transition_length: 1s
    - display.page.show: display_page1
    - component.update: my_display

esp32:
  board: "${entity_id}"
  framework:
    type: arduino

#######################################
## Global variables
#######################################
globals:
- id: enable_wifi_led_status
  type: bool
  restore_value: no
  initial_value: "true"
- id: is_api_connected
  type: bool
  restore_value: no
  initial_value: "false"
- id: is_mqtt_connected
  type: bool
  restore_value: no
  initial_value: "false"
- id: is_wifi_connected
  type: bool
  restore_value: no
  initial_value: "false"

#######################################
## Enable Home Assistant API
#######################################

packages:
  pkg_api: !include common/api.yaml
  pkg_ota: !include common/ota.yaml
  pkg_common: !include common/standard_mesh.yaml
  pkg_wifi: !include common/wifi.yaml
  pkg_mqtt: !include common/mqtt.yaml
  pkg_sensor: !include common/sensor.yaml
  pkg_binary_sensor: !include common/binary_sensor.yaml
  pkg_text_sensor: !include common/text_sensor.yaml
  pkg_switch: !include common/switch.yaml
  # Display
  pkg_font: !include common/font.yaml
  pkg_font_images: !include common/font_images.yaml
  pkg_display_off: !include common/display_off.yaml
  # additional packages
  # pkg_audio: !include common/audio.yaml
  # pkg_rtttl: !include common/rtttl.yaml
  pkg_temp: !include common/bmp280.yaml # Temperature, Pressure
  pkg_humidity: !include common/sht40.yaml # Humidity (Can give temperature as well)
  pkg_led_strip: !include common/sk6812.yaml # LED Strip

# Buttons
binary_sensor:
- platform: gpio
  id: button_a
  name: "${friendly_name} Button A"
  icon: mdi:nintendo-switch
  pin:
    number: GPIO39
    inverted: true
  on_press:
    then:
    - logger.log:
        format: "Button A was pressed"
        level: INFO
    - if:
        condition:
          script.is_running: script_page_turn
        then:
        - logger.log:
            format: "Script is already running"
            level: INFO
        else:
        - script.execute: script_page_turn
    - binary_sensor.template.publish:
        id: dim_display_on
        state: ON
    - binary_sensor.template.publish:
        id: dim_display_off
        state: ON
  on_release:
    then:
    - binary_sensor.template.publish:
        id: dim_display_on
        state: OFF
    - binary_sensor.template.publish:
        id: dim_display_off
        state: OFF

- platform: gpio
  id: button_b
  name: "${friendly_name} Button B"
  icon: mdi:nintendo-switch
  pin:
    number: GPIO38
    inverted: true
  on_press:
    then:
    - logger.log:
        format: "Button B was pressed"
        level: INFO
    - if:
        condition:
          script.is_running: script_page_turn
        then:
        - logger.log:
            format: "Script is already running"
            level: INFO
        else:
        - script.execute: script_page_turn
    - binary_sensor.template.publish:
        id: dim_display_on
        state: ON
    - binary_sensor.template.publish:
        id: dim_display_off
        state: ON
  on_release:
    then:
    - binary_sensor.template.publish:
        id: dim_display_on
        state: OFF
    - binary_sensor.template.publish:
        id: dim_display_off
        state: OFF

- platform: gpio
  id: button_c
  name: "${friendly_name} Button C"
  icon: mdi:nintendo-switch
  pin:
    number: GPIO37
    inverted: true
  on_press:
    then:
    - logger.log:
        format: "Button C was pressed"
        level: INFO
    - if:
        condition:
          script.is_running: script_page_turn
        then:
        - logger.log:
            format: "Script is already running"
            level: INFO
        else:
        - script.execute: script_page_turn
    - binary_sensor.template.publish:
        id: dim_display_on
        state: ON
    - binary_sensor.template.publish:
        id: dim_display_off
        state: ON
  on_release:
    then:
    - binary_sensor.template.publish:
        id: dim_display_on
        state: OFF
    - binary_sensor.template.publish:
        id: dim_display_off
        state: OFF

# - platform: template
#   name: "${friendly_name} Button Template"
#   id: button_template
#   icon: mdi:dip-switch
#   on_press:
#     then:
#       - logger.log: "Button Template was pressed"
#       - script.execute: script_page_turn
#       - binary_sensor.template.publish:
#           id: dim_display_on
#           state: ON
#       - binary_sensor.template.publish:
#           id: dim_display_off
#           state: ON
#   on_release:
#     then:
#       - binary_sensor.template.publish:
#           id: dim_display_on
#           state: OFF
#       - binary_sensor.template.publish:
#           id: dim_display_off
#           state: OFF

script:
- id: script_page_turn
  mode: single
  then:
  - if:
      condition:
        binary_sensor.is_on: button_a
      then:
      - logger.log:
          format: "Script Button A was pressed"
          level: INFO
      # - light.turn_on: ${display_backlight}
      - display.page.show: display_page1
      - component.update: my_display

  - if:
      condition:
        binary_sensor.is_on: button_b
      then:
      - logger.log:
          format: "Script Button B was pressed"
          level: INFO
      # - light.turn_on: ${display_backlight}
      - display.page.show: display_page2
      - component.update: my_display

  - if:
      condition:
        binary_sensor.is_on: button_c
      then:
      - logger.log:
          format: "Script Button C was pressed"
          level: INFO
      # - light.turn_on: ${display_backlight}
      - display.page.show: display_page3
      - component.update: my_display

# - id: script_turn_on_led_ambient
#   mode: single
#   then:
#     - lambda: |-
#         static bool first_run = true;
#         if (!first_run) {
#           first_run = true;
#           id(led_strip).turn_off();
#           return;
#         }
#         first_run = false;
#         id(led_strip).turn_on();
# // Set correct values
# // auto call = id(led_light).turn_on();
# // // set parameters (optional)
# // call.set_transition_length(1000); // in ms
# // call.set_brightness(0.5); // 1.0 is full brightness
# // call.set_color_mode(ColorMode::RGB_COLD_WARM_WHITE);
# // call.set_rgb(1.0, 0.0, 0.0); // color in RGB order, this example is purple
# // call.set_cold_white(0.2);
# // call.set_warm_white(0.75);
# // //call.set_effect("addressable_fireworks");
# // // perform action:
# // call.perform();

# Power Management
external_components:
- source:
    type: git
    url: https://github.com/ssieb/custom_components
  components: [ip5306]

ip5306:
  i2c_id: bus_a
  battery_level:
    name: "${friendly_name} Battery Percent"
    id: battery_percent
    icon: mdi:battery-high
  charger_connected:
    name: "${friendly_name} Charger Connected"
    id: battery_connected
    icon: mdi:battery-charging-medium
  charge_full:
    name: "${friendly_name} Charge Full"
    id: battery_full
    icon: mdi:battery-charging-high

# Internal LEDS
output:
- platform: ledc # display backlight output
  pin: GPIO32
  id: ${display_backlight}_pwm

# - platform: esp32_pwm
#   pin: GPIO25
#   icon: material-symbols:volume-down-rounded
#   id: rtttl_out

light:
- platform: monochromatic # display backlight
  output: ${display_backlight}_pwm
  name: "${friendly_name} Backlight"
  icon: mdi:monitor
  id: ${display_backlight}
  restore_mode: ALWAYS_OFF

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19
  interface: hardware

#
# I2C configuration entry for ESP32
i2c:
- id: bus_a
  sda: 21
  scl: 22
  scan: true
  # Default 50kHz. Min. setting at 100kHz needed. Otherwise lambda is so slow that warnings appear in log
  # frequency: 50khz
- id: bus_c
  sda: 17
  scl: 16
  scan: true

graph:
# Show bare-minimum auto-ranged graph
- id: single_temperature_graph
  duration: 20min
  x_grid: 5min
  y_grid: 1.0
  max_range: 50.0
  width: 300
  height: 200
  traces:
  - sensor: notcorrect_temperature_sensor
    line_type: DASHED
    line_thickness: 2
    color: my_red
  - sensor: temperature_sensor
    line_type: SOLID
    line_thickness: 3
    color: my_blue

display:
- platform: ili9xxx
  model: M5STACK
  cs_pin: GPIO14
  dc_pin: GPIO27
  reset_pin: GPIO33
  id: my_display
  update_interval: 15s
  pages:
  - id: display_page1
    lambda: |-
      ESP_LOGD("screen", "Displaying page 1");
      it.fill( id(my_green).fade_to_black(200) );

      // icon_temp
      it.image(0, 0, id(icon_temp));
      it.printf(40, 0, id(roboto_big), "Temp.: %.1f C", id(temperature_sensor).state);

      // icon_pressure
      it.image(0, 40, id(icon_pressure));
      it.printf(40, 40, id(roboto_big), "Pressure: %.1f kPa", id(pressure_sensor).state);

      // icon_wifi
      it.image(0, 80, id(icon_wifi));
      it.printf(40, 80, id(roboto_big), "Wi-Fi: %.1f dB", id(wifi_sensor).state);

      // icon_battery
      it.image(0, 120, id(icon_battery));
      it.printf(40, 120, id(roboto_big), "Battery: %.1f%%", id(battery_percent).state);

      // icon_uptime
      it.image(0, 160, id(icon_uptime));
      it.printf(40, 160, id(roboto_big), "Uptime: %.1f%", id(uptime_sensor).state);

  - id: display_page2
    lambda: |-
      ESP_LOGD("screen", "Displaying page 2");

      // Red: 100%, Green: 53%, Blue: 5%
      // Turn on or off the LED ambient
      // id(led_strip).toggle();

      auto call = id(led_strip).turn_on();
      // set parameters (optional)
      call.set_transition_length(1000); // in ms
      call.set_brightness(1.0); // 1.0 is full brightness
      call.set_color_mode(ColorMode::RGB_COLD_WARM_WHITE);
      call.set_rgb(1.0, 0.5, 0.1); // color in RGB order, want orange
      call.set_cold_white(0.5);
      call.set_warm_white(0.75);
      // perform action:
      call.perform();

      // Draw the graph at position [x=10,y=20]
      it.graph(10, 20, id(single_temperature_graph));

  - id: display_page3
    lambda: |-
      ESP_LOGD("screen", "Displaying page 3");
      int shift_x = (it.get_width() -  310) / 2;
      int shift_y = (it.get_height() - 256) / 2;
      for( auto i = 0; i < 256; i++ ) {
          it.horizontal_line(shift_x +  0,  i + shift_y, 50, my_red.fade_to_white(i));
          it.horizontal_line(shift_x + 50,  i + shift_y, 50, my_red.fade_to_black(i));

          it.horizontal_line(shift_x + 105, i + shift_y, 50, my_green.fade_to_white(i));
          it.horizontal_line(shift_x + 155, i + shift_y, 50, my_green.fade_to_black(i));

          it.horizontal_line(shift_x + 210, i + shift_y, 50, my_blue.fade_to_white(i));
          it.horizontal_line(shift_x + 260, i + shift_y, 50, my_blue.fade_to_black(i));

          it.printf(shift_x +      2 + 260, 2 + shift_y, id(roboto_small), "Index: %.1f", i);
      }
      it.rectangle( shift_x + 0, 0 + shift_y, shift_x + 310, 256 + shift_y, my_yellow);
