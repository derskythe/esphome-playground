---
substitutions:
  friendly_name: "M5Stack"
  entity_id: "m5stack-core2"
  wifi_power_save_mode: "none"
  enable_ota: "true"
  enable_wifi_led_status: "true"
  display_backlight: "display_backlight"

esphome:
  name: "${entity_id}"
  friendly_name: "${friendly_name}"
  includes:
    - "sound/betty_online.h"
    - "sound/betty_shutdown.h"
  on_boot:
    priority: 800
    then:
      - logger.log:
          format: "Booting ESP32"
          level: INFO
      - light.turn_on:
          id: "${display_backlight}"
          brightness: 1
          transition_length: 1s
      - display.page.show: display_page1
      - component.update: main_display

esp32:
  board: "${entity_id}"
  framework:
    type: arduino

#######################################
## Global variables
#######################################
globals:
  - id: enable_wifi_led_status
    type: bool
    restore_value: "false"
    initial_value: "true"
  - id: is_api_connected
    type: bool
    restore_value: "false"
    initial_value: "false"
  - id: is_mqtt_connected
    type: bool
    restore_value: "false"
    initial_value: "false"
  - id: is_wifi_connected
    type: bool
    restore_value: "false"
    initial_value: "false"

#######################################
## Enable Home Assistant API
#######################################

packages:
  pkg_api: !include common/api.yaml
  pkg_ota: !include common/ota.yaml
  pkg_common: !include common/standard_mesh.yaml
  pkg_wifi: !include common/wifi.yaml
  pkg_mqtt: !include common/mqtt.yaml
  pkg_sensor: !include common/sensor.yaml
  pkg_binary_sensor: !include common/binary_sensor.yaml
  pkg_text_sensor: !include common/text_sensor.yaml
  pkg_switch: !include common/switch.yaml
  # Display
  pkg_font: !include common/font.yaml
  pkg_font_images: !include common/font_images.yaml
  pkg_display_off: !include common/display_off.yaml
  # additional packages
  # pkg_audio: !include common/audio.yaml
  # pkg_rtttl: !include common/rtttl.yaml
  # Temperature, Pressure
  pkg_temp: !include common/bmp280.yaml
  # Humidity (Can give temperature as well)
  pkg_humidity: !include common/sht40.yaml
  # LED Strip
  pkg_led_strip: !include common/sk6812.yaml
  pkg_audio: !include common/i2s.yaml

# Buttons
binary_sensor:
  - platform: gpio
    id: button_a
    name: "${friendly_name} Button A"
    icon: mdi:nintendo-switch
    pin:
      number: GPIO39
      inverted: "true"
    filters:
      - delayed_off: 10ms
    on_press:
      then:
        - logger.log:
            format: "Button A was pressed"
            level: INFO
        - if:
            condition:
              script.is_running: script_page_turn
            then:
              - logger.log:
                  format: "Script is already running"
                  level: INFO
            else:
              - script.execute: script_page_turn
        - binary_sensor.template.publish:
            id: dim_display_on
            state: "true"
        - binary_sensor.template.publish:
            id: dim_display_off
            state: "true"
    on_release:
      then:
        - binary_sensor.template.publish:
            id: dim_display_on
            state: "false"
        - binary_sensor.template.publish:
            id: dim_display_off
            state: "false"

  - platform: gpio
    id: button_b
    name: "${friendly_name} Button B"
    icon: mdi:nintendo-switch
    pin:
      number: GPIO38
      inverted: "true"
    filters:
      - delayed_off: 10ms
    on_press:
      then:
        - logger.log:
            format: "Button B was pressed"
            level: INFO
        - if:
            condition:
              script.is_running: script_page_turn
            then:
              - logger.log:
                  format: "Script is already running"
                  level: INFO
            else:
              - script.execute: script_page_turn
        - binary_sensor.template.publish:
            id: dim_display_on
            state: "true"
        - binary_sensor.template.publish:
            id: dim_display_off
            state: "true"
    on_release:
      then:
        - binary_sensor.template.publish:
            id: dim_display_on
            state: "false"
        - binary_sensor.template.publish:
            id: dim_display_off
            state: "false"

  - platform: gpio
    id: button_c
    name: "${friendly_name} Button C"
    icon: mdi:nintendo-switch
    pin:
      number: GPIO37
      inverted: "true"
    filters:
      - delayed_off: 10ms
    on_press:
      then:
        - logger.log:
            format: "Button C was pressed"
            level: INFO
        - if:
            condition:
              script.is_running: script_page_turn
            then:
              - logger.log:
                  format: "Script is already running"
                  level: INFO
            else:
              - script.execute: script_page_turn
        - binary_sensor.template.publish:
            id: dim_display_on
            state: "true"
        - binary_sensor.template.publish:
            id: dim_display_off
            state: "true"
    on_release:
      then:
        - binary_sensor.template.publish:
            id: dim_display_on
            state: "false"
        - binary_sensor.template.publish:
            id: dim_display_off
            state: "false"

# - platform: template
#   name: "${friendly_name} Button Template"
#   id: button_template
#   icon: mdi:dip-switch
#   on_press:
#     then:
#       - logger.log: "Button Template was pressed"
#       - script.execute: script_page_turn
#       - binary_sensor.template.publish:
#           id: dim_display_on
#           state: "true"
#       - binary_sensor.template.publish:
#           id: dim_display_off
#           state: "true"
#   on_release:
#     then:
#       - binary_sensor.template.publish:
#           id: dim_display_on
#           state: "false"
#       - binary_sensor.template.publish:
#           id: dim_display_off
#           state: "false"

script:
  - id: script_page_turn
    mode: single
    then:
      - if:
          condition:
            binary_sensor.is_on: button_a
          then:
            - logger.log:
                format: "Script Button A was pressed"
                level: INFO
            # - light.turn_on: ${display_backlight}
            - display.page.show: display_page1
            - component.update: main_display

      - if:
          condition:
            binary_sensor.is_on: button_b
          then:
            - logger.log:
                format: "Script Button B was pressed"
                level: INFO
            # - light.turn_on: ${display_backlight}
            - display.page.show: display_page2
            - component.update: main_display

      - if:
          condition:
            binary_sensor.is_on: button_c
          then:
            - logger.log:
                format: "Script Button C was pressed"
                level: INFO
            # - light.turn_on: ${display_backlight}
            - display.page.show: display_page3
            - component.update: main_display

# - id: script_turn_on_led_ambient
#   mode: single
#   then:
#     - lambda: |-
#         static bool first_run = true;
#         if (!first_run) {
#           first_run = true;
#           id(led_strip).turn_off();
#           return;
#         }
#         first_run = false;
#         id(led_strip).turn_on();
# // Set correct values
# // auto call = id(led_light).turn_on();
# // // set parameters (optional)
# // call.set_transition_length(1000); // in ms
# // call.set_brightness(0.5); // 1.0 is full brightness
# // call.set_color_mode(ColorMode::RGB_COLD_WARM_WHITE);
# // call.set_rgb(1.0, 0.0, 0.0); // color in RGB order, this example is purple
# // call.set_cold_white(0.2);
# // call.set_warm_white(0.75);
# // //call.set_effect("addressable_fireworks");
# // // perform action:
# // call.perform();

# Power Management
external_components:
  - source:
      type: git
      url: "https://github.com/ssieb/custom_components"
    components: [ip5306]

ip5306:
  i2c_id: bus_a
  battery_level:
    id: battery_percent
    name: "${friendly_name} Battery Percent"
    icon: mdi:battery-high
  charger_connected:
    id: battery_connected
    name: "${friendly_name} Charger Connected"
    icon: mdi:battery-charging-medium
  charge_full:
    id: battery_full
    name: "${friendly_name} Charge Full"
    icon: mdi:battery-charging-high

# Internal LEDs
# Display backlight output
output:
  - platform: ledc
    id: "${display_backlight}_pwm"
    pin: GPIO32

# - platform: esp32_pwm
#   pin: GPIO25
#   icon: material-symbols:volume-down-rounded
#   id: rtttl_out
# Display backlight
light:
  - platform: monochromatic
    id: "${display_backlight}"
    output: "${display_backlight}_pwm"
    name: "${friendly_name} Backlight"
    icon: mdi:monitor
    restore_mode: ALWAYS_OFF

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19
  interface: hardware

#
# I2C configuration entry for ESP32
i2c:
  - id: bus_a
    sda: 21
    scl: 22
    scan: "true"
    # Default: 50KHz. min. setting at 100KHz needed.
    # Otherwise, lambda is so slow that
    # warnings appear in log frequency: 50Khz
  - id: bus_c
    sda: 17
    scl: 16
    scan: "true"

graph:
  # Show bare-minimum auto-ranged graph
  - id: single_temperature_graph
    duration: 20min
    x_grid: 5min
    y_grid: 1.0
    max_range: 50.0
    width: 300
    height: 200
    traces:
      - sensor: not_correct_temperature_sensor
        line_type: DASHED
        line_thickness: 2
        color: my_red
      - sensor: temperature_sensor
        line_type: SOLID
        line_thickness: 3
        color: my_blue

display:
  - platform: ili9xxx
    id: main_display
    model: M5STACK
    cs_pin: GPIO14
    dc_pin: GPIO27
    reset_pin: GPIO33
    update_interval: 15s
    invert_colors: "false"
    pages:
      - id: display_page1
        lambda: |-
          ESP_LOGD("screen", "Displaying page 1");

          int first_element_pos = 0;
          int second_element_pos = 40;
          int element_line = 0;
          it.fill(id(my_green));

          // Picture: icon_temp
          it.image(first_element_pos, element_line, id(icon_temp));
          it.printf(second_element_pos, element_line, id(roboto_big),
          "Temp.: %.1f C", id(temperature_sensor).state);
          element_line += second_element_pos;

          // Picture: icon_pressure
          it.image(first_element_pos, element_line, id(icon_pressure));
          it.printf(second_element_pos, element_line, id(roboto_big),
          "Pressure: %.1f kPa", id(pressure_sensor).state);
          element_line += second_element_pos;

          // Picture: icon_wifi
          it.image(first_element_pos, element_line, id(icon_wifi));
          it.printf(second_element_pos, element_line, id(roboto_big),
          "Wi-Fi: %.1f dB", id(wifi_sensor).state);
          element_line += second_element_pos;

          // Picture: icon_battery
          it.image(first_element_pos, element_line, id(icon_battery));
          it.printf(second_element_pos, element_line, id(roboto_big),
          "Battery: %.1f%%", id(battery_percent).state);
          element_line += second_element_pos;

          // Picture: icon_uptime
          it.image(first_element_pos, element_line, id(icon_uptime));
          it.printf(second_element_pos, element_line, id(roboto_big),
          "Uptime: %.1f%", id(uptime_sensor).state);

      - id: display_page2
        lambda: |-
          ESP_LOGD("screen", "Displaying page 2");

          // Red: 100%, Green: 53%, Blue: 5%
          // Turn on or off the LED ambient
          // id(led_strip).toggle();
          id(general_speaker).play();

          auto call = id(led_strip).turn_on();
          // Set parameters (optional)
          // in ms
          call.set_transition_length(1000);
          // 1.0 is full brightness
          call.set_brightness(1.0);
          call.set_color_mode(ColorMode::RGB_COLD_WARM_WHITE);
          // Color in RGB order, want orange
          call.set_rgb(1.0, 0.5, 0.1);
          call.set_cold_white(0.5);
          call.set_warm_white(0.75);

          // Perform action
          call.perform();

          // Draw the graph at position [x=10,y=20]
          it.graph(10, 20, id(single_temperature_graph));

      - id: display_page3
        lambda: |-
          ESP_LOGD("screen", "Displaying page 3");

          int spacing = 50;
          int max_width = 310;
          int max_height = 256;
          int shift_x = (it.get_width() -  max_width) / 2;
          int shift_y = (it.get_height() - max_height) / 2;

          for(int i = 0; i < max_height; i++) {
              int j = 0;

              it.horizontal_line(shift_x + (spacing * j), i + shift_y,
              spacing, id(my_red));
              j++;
              it.horizontal_line(shift_x + (spacing * j), i + shift_y,
              spacing, id(my_red));
              j++;

              it.horizontal_line(shift_x + (spacing * j) + 5, i + shift_y,
              spacing, id(my_green));
              j++;
              it.horizontal_line(shift_x + (spacing * j) + 5, i + shift_y,
              spacing, id(my_green));
              j++;

              it.horizontal_line(shift_x + (spacing * j) + 10, i + shift_y,
              spacing, id(my_blue));
              j++;
              it.horizontal_line(shift_x + (spacing * j) + 10, i + shift_y,
              spacing, id(my_blue));

              it.printf(shift_x + (spacing * j) + 12, 2 + shift_y,
              id(roboto_small), "Index: %.1f", i);
          }
          it.rectangle(shift_x, shift_y, shift_x + max_width,
          max_height + shift_y, id(my_yellow));
